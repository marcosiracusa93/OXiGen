class OXiGen {

	private static final double THRESH = 0.46875;
	private static final double INV_SQRT_PI = 0.56418958354775628;
	private static final double INV_SQRT_TWO = 0.70710678118654752;

	private static final double d_A[] = { 0.0, 3.16112374387056560,
			113.864154151050156, 377.485237685302021, 3209.37758913846947,
			0.185777706184603153 };

	private static final double d_B[] = { 0.0, 23.6012909523441209,
			244.024637934444173, 1282.61652607737228, 2844.23683343917062 };

	private static final double d_C[] = { 0.0, 0.564188496988670089,
			8.88314979438837594, 66.1191906371416295, 298.635138197400131,
			881.952221241769090, 1712.04761263407058, 2051.07837782607147,
			1230.33935479799725, 2.15311535474403846e-8 };

	private static final double d_D[] = { 0.0, 15.7449261107098347,
			117.693950891312499, 537.181101862009858, 1621.38957456669019,
			3290.79923573345963, 4362.61909014324716, 3439.36767414372164,
			1230.33935480374942 };

	private static final double d_P[] = { 0.0, 0.305326634961232344,
			0.360344899949804439, 0.125781726111229246, 0.0160837851487422766,
			0.000658749161529837803, 0.0163153871373020978 };

	private static final double d_Q[] = { 0.0, 2.56852019228982242,
			1.87295284992346047, 0.527905102951428412, 0.0605183413124413191,
			0.00233520497626869185 };

	public static DFEVar Ncdf(DFEVar x)
	{

		DFEVar d = x * INV_SQRT_TWO;
		DFEVar y = KernelMath.abs(d);
		DFEVar res;

		// block 0

		DFEVar ysq0 = y * y;
		DFEVar Xnum0 = d_A[5] * ysq0;
		DFEVar Xden0 = ysq0;
		for (int i = 1; i < 4; i++) {

			Xnum0 = (Xnum0 + d_A[i]) * ysq0;
			Xden0 = (Xden0 + d_B[i]) * ysq0;
		}
		DFEVar ans0 = d * (Xnum0 + d_A[4]) / (Xden0 + d_B[4]);
		DFEVar res0 = 0.5 * (1.0 + ans0);


		// block 1
		DFEVar Xnum1 = d_C[9] * y;
		DFEVar Xden1 = y;

		for (int i = 1; i < 8; i++) {

			Xnum1 = (Xnum1 + d_C[i]) * y;
			Xden1 = (Xden1 + d_D[i]) * y;
		}
		DFEVar ans1 = (Xnum1 + d_C[8]) / (Xden1 + d_D[8]);
		DFEVar tmp1 = KernelMath.exp(y * y);
		ans1 *= 1 / tmp1;

		DFEVar res1 = d > 0 ? 1.0 - 0.5 * ans1 : 0.5 * ans1;


		// block 2

		DFEVar ysq_inv2 = 1 / (y * y);
		DFEVar Xnum2 = d_P[6] * ysq_inv2;
		DFEVar Xden2 = ysq_inv2;
		for (int i = 1; i < 5; i++) {

			Xnum2 = (Xnum2 + d_P[i]) * ysq_inv2;
			Xden2 = (Xden2 + d_Q[i]) * ysq_inv2;
		}
		DFEVar ans2 = ysq_inv2 * (Xnum2 + d_P[5]) / (Xden2 + d_Q[5]);
		ans2 = (INV_SQRT_PI - ans2) / y;
		DFEVar tmp2 = KernelMath.exp(y * y);
		ans2 *= 1 / tmp2;

		DFEVar res2 = d > 0 ? 1.0 - 0.5 * ans2 : 0.5 * ans2;

		res = y <= THRESH ? res0 : (y <= 4.0 ? res1 : res2);


		return res;
	}

}